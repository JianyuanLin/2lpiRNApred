if __name__ == '__main__':
    #data_preprocess('res1.txt')
    import argparse
    import sys
    import subprocess
    from argparse import RawTextHelpFormatter

    parse = argparse.ArgumentParser(description="The train module for training a SVM classifier.",
                                    formatter_class=RawTextHelpFormatter)
    parse.add_argument('files', nargs='*',
                       help="The input files, generated by former steps or webserver.")
    parse.add_argument('-p', default='ACC', choices=['ACC', 'MCC', 'AUC'],
                       help="The performance metric used for parameter selection.\n"
                       "Default value is ACC.")
    parse.add_argument('-m',
                       help="The name of the trained model.")
    parse.add_argument('-cpu', type=int,
                       help="The maximum number of CPU core used for multiprocessing in\n"
                       "parameter selection. Default is the number of all CPU cores.")
    parse.add_argument('-c', nargs='*',
                       help="The parameter cost of RBF kernel is usually represented as the\n"
                       " c power of 2 and the value of c should be input here. Either one value \n"
                       "or a range is acceptable. If users want to input a range, the format is like\n"
                       " '-c 1 5 1': the first value is the lower bound, the second value is the upper\n"
                       " bound and the third value is the step.\n"
                       "Default value is 7.")
    parse.add_argument('-g', nargs='*',
                       help="The parameter gamma of RBF kernel is usually represented as the\n"
                       " g power of 2 and the value of g should be input here. Either one value \n"
                       "or a range is acceptable. If users want to input a range, the format is like\n"
                       " '-g -1 5': the first value is the lower bound, the second value is the upper\n"
                       " bound and the third value is the step. The default step is 1.\n"
                       "Default value is -1.")

    parse.add_argument('-opt', default='0', choices=['0', '1'],
                       help="Set the range of parameters to be optimized.\n"
                       "0: small range set c from -5 to 10, step is 2; g from -10 to 5, step is 2.\n"
                       "1: large range set c from -5 to 10, step is 1; g from -10 to 5, step is 1.\n"
                       "Default value is 0.")

    parse.add_argument('-b', default='0', choices=['0', '1'],
                       help="whether to train a SVC or SVR model for probability\n"
                       "estimates, 0 or 1. Default value is 0.")
    parse.add_argument('-v',
                       help="The cross validation mode.\n"
                       "n: (an integer larger than 0) n-fold cross validation.\n"
                       "j: (character 'j') jackknife cross validation.\n"
                       "i: (character 'i') independent test set method.")
    parse.add_argument('-i_files', nargs='+',
                       help="The independent test dataset.\n"
                       "If the parameter '-v' is specified as 'i', one or more\n"
                       " independent test dataset files should be\n"
                       "included.\n"
                       "e.g. '-i_files test1.txt test2.txt'.")
    args = parse.parse_args()
    cmder = ' '.join(sys.argv[1:])
    cmd = 'python trainn.pyc' + ' ' + cmder
    sys.dont_write_bytecode = True
    subprocess.call(cmd, shell=True)